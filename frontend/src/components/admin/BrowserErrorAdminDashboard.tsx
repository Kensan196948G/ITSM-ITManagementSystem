import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Switch,
  FormControlLabel,
  Tabs,
  Tab,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  LinearProgress,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  IconButton,
  Tooltip,
  Badge,
  CircularProgress,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider
} from '@mui/material';
import {
  Dashboard as DashboardIcon,
  Error as ErrorIcon,
  Build as BuildIcon,
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  PlayArrow as PlayIcon,
  Stop as StopIcon,
  Refresh as RefreshIcon,
  Settings as SettingsIcon,
  Assessment as AssessmentIcon,
  Timeline as TimelineIcon,
  Security as SecurityIcon,
  Speed as SpeedIcon,
  Visibility as VisibilityIcon,
  ExpandMore as ExpandMoreIcon,
  Download as DownloadIcon,
  Upload as UploadIcon,
  History as HistoryIcon,
  Emergency as EmergencyIcon,
  TrendingUp as TrendingUpIcon,
  AutoMode as AutoModeIcon
} from '@mui/icons-material';

// MCP Playwright Services
import { MCPPlaywrightErrorDetector, defaultConfig as detectorConfig, BrowserError } from '../../services/mcpPlaywrightErrorDetector';
import { AutoRepairEngine } from '../../services/autoRepairEngine';
import { ValidationSystem } from '../../services/validationSystem';
import { InfiniteLoopController, defaultInfiniteLoopConfig } from '../../services/infiniteLoopController';
import { MCPPlaywrightMasterController, defaultMasterControllerConfig } from '../../services/mcpPlaywrightMasterController';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`admin-tabpanel-${index}`}
      aria-labelledby={`admin-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

const BrowserErrorAdminDashboard: React.FC = () => {
  const [tabValue, setTabValue] = useState(0);
  
  // MCP Playwright Services
  const [masterController, setMasterController] = useState<MCPPlaywrightMasterController | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);
  const [isInitializing, setIsInitializing] = useState(false);
  const [initializationError, setInitializationError] = useState<string | null>(null);
  
  const [systemStatus, setSystemStatus] = useState({
    errorDetection: false,
    autoRepair: false,
    infiniteLoop: false,
    validation: false,
    masterController: false
  });
  
  const [statistics, setStatistics] = useState({
    totalErrors: 0,
    fixedErrors: 0,
    activeMonitoring: false,
    successRate: 0,
    averageFixTime: 0,
    loopSessions: 0,
    healthScore: 100,
    systemUptime: 0,
    activeBrowsers: 0,
    currentIteration: 0
  });

  const [realtimeStats, setRealtimeStats] = useState<any>(null);
  const [currentSession, setCurrentSession] = useState<any>(null);
  const [sessionHistory, setSessionHistory] = useState<any[]>([]);
  const [configDialogOpen, setConfigDialogOpen] = useState(false);
  const [reportDialogOpen, setReportDialogOpen] = useState(false);
  const [selectedReport, setSelectedReport] = useState<any>(null);
  const [alertsHistory, setAlertsHistory] = useState<any[]>([]);
  const [performanceMetrics, setPerformanceMetrics] = useState<any>(null);

  // „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
  const initializeMasterController = async () => {
    if (isInitializing) return;
    
    setIsInitializing(true);
    setInitializationError(null);

    try {
      console.log('üöÄ MCP Playwright „Éû„Çπ„Çø„Éº„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÇíÂàùÊúüÂåñ‰∏≠...');

      // „Éû„Çπ„Çø„Éº„Ç≥„É≥„Éà„É≠„Éº„É©„ÉºË®≠ÂÆö
      const masterConfig = {
        ...defaultMasterControllerConfig,
        detectorConfig: {
          ...detectorConfig,
          targetUrls: [
            'http://192.168.3.135:3000',
            'http://192.168.3.135:3000/admin'
          ],
          browsers: ['chromium', 'firefox'] as const,
          monitoringInterval: 5000,
          enableScreenshots: true,
          enableTrace: true,
          reportingEnabled: true,
        },
        loopConfig: {
          ...defaultInfiniteLoopConfig,
          maxIterations: 500,
          iterationDelay: 15000,
          errorThreshold: 3,
          successThreshold: 3,
          timeoutMinutes: 180,
        },
        enableAutoStart: false,
        healthCheckInterval: 30000,
        reportingInterval: 300000,
        systemSettings: {
          maxConcurrentRepairs: 3,
          emergencyStopOnFailure: true,
          enableDetailedLogging: true,
          enablePerformanceMonitoring: true,
        },
      };

      const controller = new MCPPlaywrightMasterController(masterConfig);
      await controller.initialize();

      setMasterController(controller);
      setIsInitialized(true);
      setSystemStatus(prev => ({ ...prev, masterController: true }));

      console.log('‚úÖ „Éû„Çπ„Çø„Éº„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅÆÂàùÊúüÂåñÂÆå‰∫Ü');

      // ÂÆöÊúüÁöÑ„Å™Áµ±Ë®àÊõ¥Êñ∞„ÇíÈñãÂßã
      startRealtimeUpdates(controller);

    } catch (error) {
      console.error('‚ùå „Éû„Çπ„Çø„Éº„Ç≥„É≥„Éà„É≠„Éº„É©„ÉºÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
      setInitializationError(error instanceof Error ? error.message : 'ÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setIsInitializing(false);
    }
  };

  // „É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞„ÅÆÈñãÂßã
  const startRealtimeUpdates = (controller: MCPPlaywrightMasterController) => {
    const updateInterval = setInterval(async () => {
      try {
        await updateStatistics(controller);
      } catch (error) {
        console.error('‚ùå Áµ±Ë®àÊõ¥Êñ∞„Ç®„É©„Éº:', error);
      }
    }, 3000);

    return () => clearInterval(updateInterval);
  };

  // ÂàùÊúüÂåñ
  useEffect(() => {
    initializeMasterController();

    return () => {
      // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
      if (masterController) {
        masterController.stop().catch(console.error);
      }
    };
  }, []);

  // Áµ±Ë®àÊÉÖÂ†±„ÅÆÊõ¥Êñ∞
  const updateStatistics = () => {
    if (!infiniteLoopMonitor) return;

    const repairStats = autoRepairEngine.getRepairStatistics();
    const loopStats = infiniteLoopMonitor.getStatistics();
    const currentLoopSession = infiniteLoopMonitor.getCurrentSession();

    setStatistics({
      totalErrors: repairStats.total,
      fixedErrors: repairStats.successful,
      activeMonitoring: infiniteLoopMonitor.isMonitoringActive(),
      successRate: repairStats.successRate,
      averageFixTime: 2.5, // ÂÆüË£ÖË¶Å
      loopSessions: loopStats.totalSessions
    });

    setCurrentSession(currentLoopSession);
    setSessionHistory(infiniteLoopMonitor.getSessionHistory());
  };

  // ÁÑ°Èôê„É´„Éº„ÉóÁõ£Ë¶ñ„ÅÆÈñãÂßã/ÂÅúÊ≠¢
  const toggleInfiniteLoop = async () => {
    if (!infiniteLoopMonitor) return;

    if (systemStatus.infiniteLoop) {
      infiniteLoopMonitor.stopInfiniteLoop();
      setSystemStatus(prev => ({ ...prev, infiniteLoop: false }));
    } else {
      try {
        await infiniteLoopMonitor.startInfiniteLoop('http://192.168.3.135:3000');
        setSystemStatus(prev => ({ ...prev, infiniteLoop: true }));
      } catch (error) {
        console.error('ÁÑ°Èôê„É´„Éº„ÉóÈñãÂßã„Ç®„É©„Éº:', error);
      }
    }
  };

  // „Ç®„É©„ÉºÊ§úÁü•„ÅÆÈñãÂßã/ÂÅúÊ≠¢
  const toggleErrorDetection = async () => {
    try {
      if (systemStatus.errorDetection) {
        errorDetectionEngine.stopMonitoring();
        setSystemStatus(prev => ({ ...prev, errorDetection: false }));
      } else {
        await errorDetectionEngine.startMonitoring();
        setSystemStatus(prev => ({ ...prev, errorDetection: true }));
      }
    } catch (error) {
      console.error('„Ç®„É©„ÉºÊ§úÁü•Âàá„ÇäÊõø„Åà„Ç®„É©„Éº:', error);
    }
  };

  // „É¨„Éù„Éº„Éà„ÅÆË°®Á§∫
  const showReport = (report: any) => {
    setSelectedReport(report);
    setReportDialogOpen(true);
  };

  // „É¨„Éù„Éº„Éà„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
  const downloadReport = (report: any) => {
    const data = JSON.stringify(report, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `error-monitor-report-${report.id}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <Box sx={{ p: 3 }}>
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" sx={{ display: 'flex', alignItems: 'center' }}>
          <SecurityIcon sx={{ mr: 2 }} />
          „Éñ„É©„Ç¶„Ç∂„Ç®„É©„ÉºÁõ£Ë¶ñ„Ç∑„Çπ„ÉÜ„É† ÁÆ°ÁêÜ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ
        </Typography>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button
            variant="outlined"
            startIcon={<SettingsIcon />}
            onClick={() => setConfigDialogOpen(true)}
          >
            Ë®≠ÂÆö
          </Button>
          <Button
            variant="outlined"
            startIcon={<RefreshIcon />}
            onClick={updateStatistics}
          >
            Êõ¥Êñ∞
          </Button>
        </Box>
      </Box>

      {/* „Ç∑„Çπ„ÉÜ„É†Áä∂ÊÖãÊ¶ÇË¶Å */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="h6" color="error">
                    {statistics.totalErrors}
                  </Typography>
                  <Typography variant="body2">Á∑è„Ç®„É©„ÉºÊï∞</Typography>
                </Box>
                <ErrorIcon color="error" />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="h6" color="success.main">
                    {statistics.fixedErrors}
                  </Typography>
                  <Typography variant="body2">‰øÆÂæ©Ê∏à„Åø</Typography>
                </Box>
                <CheckCircleIcon color="success" />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="h6" color="info.main">
                    {statistics.successRate.toFixed(1)}%
                  </Typography>
                  <Typography variant="body2">‰øÆÂæ©ÊàêÂäüÁéá</Typography>
                </Box>
                <TrendingUpIcon color="info" />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="h6" color="warning.main">
                    {statistics.loopSessions}
                  </Typography>
                  <Typography variant="body2">„É´„Éº„Éó„Çª„ÉÉ„Ç∑„Éß„É≥</Typography>
                </Box>
                <AutoModeIcon color="warning" />
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* „Ç∑„Çπ„ÉÜ„É†Âà∂Âæ°„Éë„Éç„É´ */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            „Ç∑„Çπ„ÉÜ„É†Âà∂Âæ°
          </Typography>
          <Grid container spacing={3} alignItems="center">
            <Grid item xs={12} md={3}>
              <FormControlLabel
                control={
                  <Switch
                    checked={systemStatus.errorDetection}
                    onChange={toggleErrorDetection}
                    color="primary"
                  />
                }
                label="„Ç®„É©„ÉºÊ§úÁü•"
              />
            </Grid>
            
            <Grid item xs={12} md={3}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <Button
                  variant={systemStatus.infiniteLoop ? "contained" : "outlined"}
                  color={systemStatus.infiniteLoop ? "error" : "primary"}
                  startIcon={systemStatus.infiniteLoop ? <StopIcon /> : <PlayIcon />}
                  onClick={toggleInfiniteLoop}
                  size="small"
                >
                  {systemStatus.infiniteLoop ? 'ÂÅúÊ≠¢' : 'ÈñãÂßã'}
                </Button>
                <Typography variant="body2">ÁÑ°Èôê„É´„Éº„ÉóÁõ£Ë¶ñ</Typography>
              </Box>
            </Grid>

            <Grid item xs={12} md={6}>
              {statistics.activeMonitoring && (
                <Box>
                  <Typography variant="body2" gutterBottom>
                    Áõ£Ë¶ñÁä∂ÊÖã
                  </Typography>
                  <LinearProgress />
                </Box>
              )}
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çø„Éñ */}
      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
        <Tabs 
          value={tabValue} 
          onChange={(e, newValue) => setTabValue(newValue)}
          aria-label="admin dashboard tabs"
        >
          <Tab label="„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ" icon={<DashboardIcon />} />
          <Tab label="„É©„Ç§„ÉñÁõ£Ë¶ñ" icon={<VisibilityIcon />} />
          <Tab label="‰øÆÂæ©Â±•Ê≠¥" icon={<BuildIcon />} />
          <Tab label="„É¨„Éù„Éº„Éà" icon={<AssessmentIcon />} />
          <Tab label="Ë®≠ÂÆö" icon={<SettingsIcon />} />
        </Tabs>
      </Box>

      {/* „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Çø„Éñ */}
      <TabPanel value={tabValue} index={0}>
        <Grid container spacing={3}>
          {/* ÁèæÂú®„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥ÊÉÖÂ†± */}
          {currentSession && (
            <Grid item xs={12}>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    ÁèæÂú®„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥
                  </Typography>
                  <Grid container spacing={2}>
                    <Grid item xs={12} md={6}>
                      <Typography variant="body2">
                        „Çª„ÉÉ„Ç∑„Éß„É≥ID: {currentSession.id}
                      </Typography>
                      <Typography variant="body2">
                        „Çπ„ÉÜ„Éº„Çø„Çπ: 
                        <Chip 
                          label={currentSession.status} 
                          color={currentSession.status === 'running' ? 'primary' : 'default'}
                          size="small"
                          sx={{ ml: 1 }}
                        />
                      </Typography>
                      <Typography variant="body2">
                        ÈñãÂßãÊôÇÂàª: {currentSession.startTime.toLocaleString()}
                      </Typography>
                    </Grid>
                    <Grid item xs={12} md={6}>
                      <Typography variant="body2">
                        ÂèçÂæ©ÂõûÊï∞: {currentSession.iterations.length}
                      </Typography>
                      <Typography variant="body2">
                        Ê§úÂá∫„Ç®„É©„Éº: {currentSession.totalErrors}
                      </Typography>
                      <Typography variant="body2">
                        ‰øÆÂæ©ÊàêÂäü: {currentSession.successfulRepairs}
                      </Typography>
                    </Grid>
                  </Grid>
                </CardContent>
              </Card>
            </Grid>
          )}

          {/* Áµ±Ë®à„ÉÅ„É£„Éº„ÉàÈ†òÂüüÔºàÂ∞ÜÊù•ÂÆüË£ÖÔºâ */}
          <Grid item xs={12} md={8}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  „Ç®„É©„ÉºÊé®Áßª
                </Typography>
                <Box sx={{ height: 300, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                  <Typography variant="body2" color="textSecondary">
                    „ÉÅ„É£„Éº„Éà„Ç®„É™„Ç¢ÔºàÂ∞ÜÊù•ÂÆüË£ÖÔºâ
                  </Typography>
                </Box>
              </CardContent>
            </Card>
          </Grid>

          {/* ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£ */}
          <Grid item xs={12} md={4}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£
                </Typography>
                <List dense>
                  <ListItem>
                    <ListItemIcon>
                      <CheckCircleIcon color="success" />
                    </ListItemIcon>
                    <ListItemText 
                      primary="„Ç®„É©„Éº‰øÆÂæ©ÂÆå‰∫Ü"
                      secondary="2ÂàÜÂâç"
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon>
                      <WarningIcon color="warning" />
                    </ListItemIcon>
                    <ListItemText 
                      primary="Êñ∞„Åó„ÅÑ„Ç®„É©„Éº„ÇíÊ§úÂá∫"
                      secondary="5ÂàÜÂâç"
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon>
                      <AutoModeIcon color="info" />
                    </ListItemIcon>
                    <ListItemText 
                      primary="ÁÑ°Èôê„É´„Éº„ÉóÁõ£Ë¶ñÈñãÂßã"
                      secondary="10ÂàÜÂâç"
                    />
                  </ListItem>
                </List>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </TabPanel>

      {/* „É©„Ç§„ÉñÁõ£Ë¶ñ„Çø„Éñ */}
      <TabPanel value={tabValue} index={1}>
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <Alert 
              severity={statistics.activeMonitoring ? "info" : "warning"}
              action={
                <Button 
                  color="inherit" 
                  size="small"
                  onClick={toggleErrorDetection}
                >
                  {statistics.activeMonitoring ? 'ÂÅúÊ≠¢' : 'ÈñãÂßã'}
                </Button>
              }
            >
              {statistics.activeMonitoring 
                ? '„Ç∑„Çπ„ÉÜ„É†„ÅØÁèæÂú®Áõ£Ë¶ñ‰∏≠„Åß„Åô' 
                : '„Ç∑„Çπ„ÉÜ„É†Áõ£Ë¶ñ„ÅåÂÅúÊ≠¢„Åó„Å¶„ÅÑ„Åæ„Åô'
              }
            </Alert>
          </Grid>

          {/* „É™„Ç¢„É´„Çø„Ç§„É†Áµ±Ë®à */}
          <Grid item xs={12}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  „É™„Ç¢„É´„Çø„Ç§„É†Áµ±Ë®à
                </Typography>
                <Grid container spacing={3}>
                  <Grid item xs={6} md={3}>
                    <Box textAlign="center">
                      <CircularProgress 
                        variant="determinate" 
                        value={statistics.successRate} 
                        size={80}
                      />
                      <Typography variant="h6" sx={{ mt: 1 }}>
                        {statistics.successRate.toFixed(1)}%
                      </Typography>
                      <Typography variant="body2">
                        ‰øÆÂæ©ÊàêÂäüÁéá
                      </Typography>
                    </Box>
                  </Grid>
                  
                  <Grid item xs={6} md={3}>
                    <Box textAlign="center">
                      <Typography variant="h4" color="error">
                        {statistics.totalErrors}
                      </Typography>
                      <Typography variant="body2">
                        Á∑è„Ç®„É©„ÉºÊï∞
                      </Typography>
                    </Box>
                  </Grid>

                  <Grid item xs={6} md={3}>
                    <Box textAlign="center">
                      <Typography variant="h4" color="success.main">
                        {statistics.fixedErrors}
                      </Typography>
                      <Typography variant="body2">
                        ‰øÆÂæ©Ê∏à„Åø
                      </Typography>
                    </Box>
                  </Grid>

                  <Grid item xs={6} md={3}>
                    <Box textAlign="center">
                      <Typography variant="h4" color="info.main">
                        {statistics.averageFixTime}s
                      </Typography>
                      <Typography variant="body2">
                        Âπ≥Âùá‰øÆÂæ©ÊôÇÈñì
                      </Typography>
                    </Box>
                  </Grid>
                </Grid>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </TabPanel>

      {/* ‰øÆÂæ©Â±•Ê≠¥„Çø„Éñ */}
      <TabPanel value={tabValue} index={2}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              ‰øÆÂæ©Â±•Ê≠¥
            </Typography>
            <TableContainer>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>ÊôÇÂàª</TableCell>
                    <TableCell>„Ç®„É©„Éº„Çø„Ç§„Éó</TableCell>
                    <TableCell>„ÇΩ„Éº„Çπ</TableCell>
                    <TableCell>‰øÆÂæ©Áä∂ÊÖã</TableCell>
                    <TableCell>Ë©¶Ë°åÂõûÊï∞</TableCell>
                    <TableCell>„Ç¢„ÇØ„Ç∑„Éß„É≥</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {/* ‰øÆÂæ©Â±•Ê≠¥„ÅÆ„Çµ„É≥„Éó„É´„Éá„Éº„Çø */}
                  {[1, 2, 3, 4, 5].map((item) => (
                    <TableRow key={item}>
                      <TableCell>
                        {new Date(Date.now() - item * 300000).toLocaleString()}
                      </TableCell>
                      <TableCell>
                        <Chip 
                          label="JavaScript Error" 
                          color="error" 
                          size="small" 
                        />
                      </TableCell>
                      <TableCell>
                        /src/components/Dashboard.tsx
                      </TableCell>
                      <TableCell>
                        <Chip 
                          label={item % 2 === 0 ? "ÊàêÂäü" : "Â§±Êïó"} 
                          color={item % 2 === 0 ? "success" : "error"}
                          size="small" 
                        />
                      </TableCell>
                      <TableCell>{item}</TableCell>
                      <TableCell>
                        <IconButton size="small">
                          <VisibilityIcon />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </CardContent>
        </Card>
      </TabPanel>

      {/* „É¨„Éù„Éº„Éà„Çø„Éñ */}
      <TabPanel value={tabValue} index={3}>
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <Card>
              <CardContent>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                  <Typography variant="h6">
                    „Çª„ÉÉ„Ç∑„Éß„É≥„É¨„Éù„Éº„Éà
                  </Typography>
                  <Button
                    startIcon={<DownloadIcon />}
                    variant="outlined"
                    size="small"
                  >
                    „Åô„Åπ„Å¶„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
                  </Button>
                </Box>
                
                <TableContainer>
                  <Table>
                    <TableHead>
                      <TableRow>
                        <TableCell>„Çª„ÉÉ„Ç∑„Éß„É≥ID</TableCell>
                        <TableCell>ÈñãÂßãÊôÇÂàª</TableCell>
                        <TableCell>„Çπ„ÉÜ„Éº„Çø„Çπ</TableCell>
                        <TableCell>ÂèçÂæ©ÂõûÊï∞</TableCell>
                        <TableCell>‰øÆÂæ©ÊàêÂäüÁéá</TableCell>
                        <TableCell>„Ç¢„ÇØ„Ç∑„Éß„É≥</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {sessionHistory.slice(0, 10).map((session) => (
                        <TableRow key={session.id}>
                          <TableCell>
                            {session.id.substring(0, 12)}...
                          </TableCell>
                          <TableCell>
                            {session.startTime.toLocaleString()}
                          </TableCell>
                          <TableCell>
                            <Chip 
                              label={session.status}
                              color={
                                session.status === 'success' ? 'success' :
                                session.status === 'emergency_stop' ? 'error' : 'default'
                              }
                              size="small"
                            />
                          </TableCell>
                          <TableCell>{session.iterations.length}</TableCell>
                          <TableCell>
                            {session.totalRepairs > 0 
                              ? ((session.successfulRepairs / session.totalRepairs) * 100).toFixed(1)
                              : '0'
                            }%
                          </TableCell>
                          <TableCell>
                            <IconButton 
                              size="small"
                              onClick={() => showReport(session)}
                            >
                              <VisibilityIcon />
                            </IconButton>
                            <IconButton 
                              size="small"
                              onClick={() => downloadReport(session)}
                            >
                              <DownloadIcon />
                            </IconButton>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </TabPanel>

      {/* Ë®≠ÂÆö„Çø„Éñ */}
      <TabPanel value={tabValue} index={4}>
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  Áõ£Ë¶ñË®≠ÂÆö
                </Typography>
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                  <FormControlLabel
                    control={<Switch defaultChecked />}
                    label="Ëá™Âãï‰øÆÂæ©„ÇíÊúâÂäπ„Å´„Åô„Çã"
                  />
                  <FormControlLabel
                    control={<Switch defaultChecked />}
                    label="‰øÆÂæ©Âæå„ÅÆÂÜÖÈÉ®Ê§úË®º„ÇíÊúâÂäπ„Å´„Åô„Çã"
                  />
                  <FormControlLabel
                    control={<Switch />}
                    label="Á∑äÊÄ•ÂÅúÊ≠¢„ÇíÊúâÂäπ„Å´„Åô„Çã"
                  />
                  <FormControlLabel
                    control={<Switch defaultChecked />}
                    label="„É™„Ç¢„É´„Çø„Ç§„É†ÈÄöÁü•„ÇíÊúâÂäπ„Å´„Åô„Çã"
                  />
                </Box>
              </CardContent>
            </Card>
          </Grid>

          <Grid item xs={12} md={6}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË®≠ÂÆö
                </Typography>
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                  <Typography variant="body2">
                    Áõ£Ë¶ñÈñìÈöî: 5Áßí
                  </Typography>
                  <Typography variant="body2">
                    ÊúÄÂ§ßÂèçÂæ©ÂõûÊï∞: 50Âõû
                  </Typography>
                  <Typography variant="body2">
                    ÊàêÂäüÈñæÂÄ§: 3ÂõûÈÄ£Á∂ö
                  </Typography>
                  <Typography variant="body2">
                    „Çø„Ç§„É†„Ç¢„Ç¶„Éà: 30Áßí
                  </Typography>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </TabPanel>

      {/* „É¨„Éù„Éº„ÉàË©≥Á¥∞„ÉÄ„Ç§„Ç¢„É≠„Ç∞ */}
      <Dialog 
        open={reportDialogOpen} 
        onClose={() => setReportDialogOpen(false)}
        maxWidth="lg"
        fullWidth
      >
        <DialogTitle>
          „Çª„ÉÉ„Ç∑„Éß„É≥Ë©≥Á¥∞„É¨„Éù„Éº„Éà
        </DialogTitle>
        <DialogContent>
          {selectedReport && (
            <Box>
              <Typography variant="h6" gutterBottom>
                „Çª„ÉÉ„Ç∑„Éß„É≥: {selectedReport.id}
              </Typography>
              <Typography variant="body2" gutterBottom>
                ÂÆüË°åÊôÇÈñì: {selectedReport.startTime.toLocaleString()} - 
                {selectedReport.endTime?.toLocaleString() || 'ÂÆüË°å‰∏≠'}
              </Typography>
              <Typography variant="body2" gutterBottom>
                „Çπ„ÉÜ„Éº„Çø„Çπ: {selectedReport.status}
              </Typography>
              <Typography variant="body2" gutterBottom>
                ÊúÄÁµÇ„É¨„Éù„Éº„Éà: {selectedReport.finalReport}
              </Typography>
              
              <Divider sx={{ my: 2 }} />
              
              <Typography variant="h6" gutterBottom>
                ÂèçÂæ©Ë©≥Á¥∞
              </Typography>
              <List>
                {selectedReport.iterations?.map((iteration: any, index: number) => (
                  <ListItem key={index}>
                    <ListItemText
                      primary={`ÂèçÂæ© ${iteration.number}: ${iteration.summary}`}
                      secondary={`„Ç®„É©„Éº: ${iteration.errorsDetected.length}, ‰øÆÂæ©: ${iteration.successfulRepairs}/${iteration.repairSessions.length}`}
                    />
                  </ListItem>
                ))}
              </List>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setReportDialogOpen(false)}>
            Èñâ„Åò„Çã
          </Button>
          {selectedReport && (
            <Button 
              onClick={() => downloadReport(selectedReport)}
              startIcon={<DownloadIcon />}
            >
              „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
            </Button>
          )}
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default BrowserErrorAdminDashboard;