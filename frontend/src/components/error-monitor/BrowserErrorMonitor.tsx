import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Switch,
  FormControlLabel,
  Alert,
  LinearProgress,
  Chip,
  Grid,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  CircularProgress,
  Badge,
  Tooltip,
  IconButton,
  Skeleton,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Divider
} from '@mui/material';
import {
  Error as ErrorIcon,
  Warning as WarningIcon,
  CheckCircle as CheckCircleIcon,
  PlayArrow as PlayIcon,
  Stop as StopIcon,
  Refresh as RefreshIcon,
  BugReport as BugReportIcon,
  Build as BuildIcon,
  Visibility as VisibilityIcon,
  Assessment as AssessmentIcon,
  Settings as SettingsIcon,
  ExpandMore as ExpandMoreIcon,
  Timeline as TimelineIcon,
  Speed as SpeedIcon,
  Security as SecurityIcon,
  NetworkCheck as NetworkCheckIcon,
  Code as CodeIcon,
  Screenshot as ScreenshotIcon
} from '@mui/icons-material';

// MCP Playwright „Çµ„Éº„Éì„Çπ
import { MCPPlaywrightErrorDetector, BrowserError, defaultConfig } from '../../services/mcpPlaywrightErrorDetector';
import { InfiniteLoopController, defaultInfiniteLoopConfig } from '../../services/infiniteLoopController';
import { AutoRepairEngine } from '../../services/autoRepairEngine';
import { ValidationSystem } from '../../services/validationSystem';

interface ExtendedBrowserError extends BrowserError {
  fixed?: boolean;
  fixAttempts?: number;
  validationPassed?: boolean;
  repairHistory?: string[];
}

interface MonitoringStats {
  totalErrors: number;
  fixedErrors: number;
  activeMonitoring: boolean;
  lastCheck: Date;
  cycleCount: number;
  successRate: number;
  infiniteLoopActive: boolean;
  currentIteration: number;
  healthScore: number;
  activeBrowsers: number;
  systemUptime: number;
}

interface BrowserErrorMonitorProps {
  targetUrl?: string;
  autoStart?: boolean;
  onErrorDetected?: (error: ExtendedBrowserError) => void;
  onErrorFixed?: (error: ExtendedBrowserError) => void;
  onInfiniteLoopStarted?: () => void;
  onInfiniteLoopStopped?: () => void;
}

const BrowserErrorMonitor: React.FC<BrowserErrorMonitorProps> = ({
  targetUrl = 'http://192.168.3.135:3000',
  autoStart = false,
  onErrorDetected,
  onErrorFixed,
  onInfiniteLoopStarted,
  onInfiniteLoopStopped
}) => {
  // MCP Playwright „Çµ„Éº„Éì„Çπ„Ç§„É≥„Çπ„Çø„É≥„Çπ
  const mcpDetector = useRef<MCPPlaywrightErrorDetector | null>(null);
  const infiniteLoopController = useRef<InfiniteLoopController | null>(null);
  const autoRepairEngine = useRef<AutoRepairEngine | null>(null);
  const validationSystem = useRef<ValidationSystem | null>(null);

  // Áä∂ÊÖãÁÆ°ÁêÜ
  const [isMonitoring, setIsMonitoring] = useState(autoStart);
  const [errors, setErrors] = useState<ExtendedBrowserError[]>([]);
  const [stats, setStats] = useState<MonitoringStats>({
    totalErrors: 0,
    fixedErrors: 0,
    activeMonitoring: false,
    lastCheck: new Date(),
    cycleCount: 0,
    successRate: 0,
    infiniteLoopActive: false,
    currentIteration: 0,
    healthScore: 100,
    activeBrowsers: 0,
    systemUptime: 0
  });
  const [isFixing, setIsFixing] = useState(false);
  const [selectedError, setSelectedError] = useState<ExtendedBrowserError | null>(null);
  const [detailsOpen, setDetailsOpen] = useState(false);
  const [autoFix, setAutoFix] = useState(true);
  const [infiniteLoop, setInfiniteLoop] = useState(false);
  const [isInitializing, setIsInitializing] = useState(false);
  const [initializationError, setInitializationError] = useState<string | null>(null);
  const [expandedAccordion, setExpandedAccordion] = useState<string | false>(false);
  
  const monitoringInterval = useRef<NodeJS.Timeout | null>(null);
  const systemStartTime = useRef<Date>(new Date());

  // „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
  const initializeSystem = async () => {
    if (isInitializing) return;
    
    setIsInitializing(true);
    setInitializationError(null);

    try {
      console.log('üöÄ MCP Playwright „Ç∑„Çπ„ÉÜ„É†„ÇíÂàùÊúüÂåñ‰∏≠...');

      // MCP Playwright „Ç®„É©„ÉºÊ§úÁü•Âô®„Çí‰ΩúÊàê
      const detectorConfig = {
        ...defaultConfig,
        targetUrls: [targetUrl, `${targetUrl}/admin`],
        monitoringInterval: 5000,
        browsers: ['chromium', 'firefox'] as const,
      };

      mcpDetector.current = new MCPPlaywrightErrorDetector(detectorConfig);
      await mcpDetector.current.initialize();

      // Ëá™Âãï‰øÆÂæ©„Ç®„É≥„Ç∏„É≥„ÇíÂàùÊúüÂåñ
      autoRepairEngine.current = new AutoRepairEngine();

      // Ê§úË®º„Ç∑„Çπ„ÉÜ„É†„ÇíÂàùÊúüÂåñ
      validationSystem.current = new ValidationSystem();

      // ÁÑ°Èôê„É´„Éº„Éó„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÇíÂàùÊúüÂåñ
      infiniteLoopController.current = new InfiniteLoopController(detectorConfig, defaultInfiniteLoopConfig);

      console.log('‚úÖ MCP Playwright „Ç∑„Çπ„ÉÜ„É†„ÅÆÂàùÊúüÂåñÂÆå‰∫Ü');

    } catch (error) {
      console.error('‚ùå „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
      setInitializationError(error instanceof Error ? error.message : '„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setIsInitializing(false);
    }
  };

  // „Ç®„É©„ÉºÊ§úÁü•Èñ¢Êï∞ÔºàÂÆüÈöõ„ÅÆMCP Playwright„Çí‰ΩøÁî®Ôºâ
  const detectErrors = async () => {
    if (!mcpDetector.current) {
      console.warn('‚ö†Ô∏è MCP Playwright „Ç®„É©„ÉºÊ§úÁü•Âô®„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
      return;
    }

    try {
      // MCP Playwright „Åã„Çâ„Ç®„É©„ÉºÁä∂Ê≥Å„ÇíÂèñÂæó
      const detectorStatus = mcpDetector.current.getStatus();
      const recentErrors = detectorStatus.recentErrors;

      // BrowserError „Çí ExtendedBrowserError „Å´Â§âÊèõ
      const extendedErrors: ExtendedBrowserError[] = recentErrors.map(error => ({
        ...error,
        fixed: false,
        fixAttempts: 0,
        validationPassed: false,
        repairHistory: []
      }));

      // Êñ∞„Åó„ÅÑ„Ç®„É©„Éº„ÅÆ„Åø„ÇíËøΩÂä†
      const newErrors = extendedErrors.filter(
        newError => !errors.some(existingError => existingError.id === newError.id)
      );

      if (newErrors.length > 0) {
        setErrors(prev => [...prev, ...newErrors]);
        newErrors.forEach(error => onErrorDetected?.(error));
        
        console.log(`üîç Êñ∞„Åó„ÅÑ„Ç®„É©„Éº ${newErrors.length} ‰ª∂„ÇíÊ§úÁü•„Åó„Åæ„Åó„Åü`);

        // Ëá™Âãï‰øÆÂæ©„ÅåÊúâÂäπ„Å™Â†¥Âêà„ÅØ‰øÆÂæ©„ÇíÈñãÂßã
        if (autoFix && !isFixing) {
          await startAutoFix(newErrors);
        }
      }

      // Áµ±Ë®àÊÉÖÂ†±„ÇíÊõ¥Êñ∞
      updateSystemStats();

    } catch (error) {
      console.error('‚ùå „Ç®„É©„ÉºÊ§úÁü•„Å´Â§±Êïó:', error);
    }
  };

  // „Ç∑„Çπ„ÉÜ„É†Áµ±Ë®àÊÉÖÂ†±„ÇíÊõ¥Êñ∞
  const updateSystemStats = () => {
    if (!mcpDetector.current) return;

    const detectorStatus = mcpDetector.current.getStatus();
    const loopStatus = infiniteLoopController.current?.getStatus();
    const repairStats = autoRepairEngine.current?.getRepairStatistics();

    const systemUptime = Date.now() - systemStartTime.current.getTime();
    const healthScore = calculateSystemHealthScore();

    setStats(prev => ({
      ...prev,
      lastCheck: new Date(),
      cycleCount: detectorStatus.totalErrors,
      totalErrors: detectorStatus.totalErrors,
      fixedErrors: repairStats?.successfulRepairs || 0,
      successRate: repairStats?.successRate ? parseFloat(repairStats.successRate.replace('%', '')) : 0,
      activeMonitoring: detectorStatus.isMonitoring,
      infiniteLoopActive: loopStatus?.isRunning || false,
      currentIteration: loopStatus?.currentIteration || 0,
      healthScore,
      activeBrowsers: detectorStatus.activeBrowsers,
      systemUptime
    }));
  };

  // „Ç∑„Çπ„ÉÜ„É†ÂÅ•Â∫∑Â∫¶„Çπ„Ç≥„Ç¢„ÇíË®àÁÆó
  const calculateSystemHealthScore = (): number => {
    const errorPenalty = errors.filter(e => !e.fixed).length * 5;
    const fixedBonus = errors.filter(e => e.fixed).length * 2;
    const uptimeFactor = Math.min(stats.systemUptime / (1000 * 60 * 60), 1) * 10; // ÊúÄÂ§ß1ÊôÇÈñì„Åß10„Éù„Ç§„É≥„Éà
    
    const score = Math.max(0, Math.min(100, 100 - errorPenalty + fixedBonus + uptimeFactor));
    return score;
  };

  // Ëá™Âãï‰øÆÂæ©Âá¶ÁêÜÔºàÂÆüÈöõ„ÅÆMCP Playwright„Çí‰ΩøÁî®Ôºâ
  const startAutoFix = async (errorsToFix?: ExtendedBrowserError[]) => {
    if (isFixing || !autoRepairEngine.current) return;

    const targetErrors = errorsToFix || errors.filter(e => !e.fixed);
    if (targetErrors.length === 0) return;

    setIsFixing(true);
    console.log(`üîß ${targetErrors.length} ‰ª∂„ÅÆ„Ç®„É©„Éº„ÅÆËá™Âãï‰øÆÂæ©„ÇíÈñãÂßã...`);

    try {
      for (const errorToFix of targetErrors) {
        try {
          console.log(`üîÑ ‰øÆÂæ©‰∏≠: ${errorToFix.message}`);

          // ÂÆüÈöõ„ÅÆ‰øÆÂæ©„ÇíÂÆüË°å
          const repairResult = await autoRepairEngine.current.repairError(errorToFix);

          // „Ç®„É©„ÉºÁä∂ÊÖã„ÇíÊõ¥Êñ∞
          setErrors(prev => prev.map(error => 
            error.id === errorToFix.id 
              ? { 
                  ...error, 
                  fixed: repairResult.success,
                  fixAttempts: (error.fixAttempts || 0) + 1,
                  repairHistory: [
                    ...(error.repairHistory || []),
                    `${repairResult.success ? 'ÊàêÂäü' : 'Â§±Êïó'}: ${repairResult.description || 'N/A'}`
                  ]
                }
              : error
          ));

          if (repairResult.success) {
            console.log(`‚úÖ ‰øÆÂæ©ÊàêÂäü: ${errorToFix.message}`);
            
            // Ê§úË®º„ÇíÂÆüË°å
            if (validationSystem.current) {
              const validationResult = await validationSystem.current.validateAfterRepair(errorToFix);
              
              if (validationResult) {
                setErrors(prev => prev.map(error => 
                  error.id === errorToFix.id 
                    ? { ...error, validationPassed: validationResult.overallScore > 80 }
                    : error
                ));
              }
            }

            onErrorFixed?.(errorToFix);
          } else {
            console.log(`‚ùå ‰øÆÂæ©Â§±Êïó: ${errorToFix.message} - ${repairResult.error || 'unknown error'}`);
          }

          // ‰øÆÂæ©ÈñìÈöî
          await new Promise(resolve => setTimeout(resolve, 1000));

        } catch (error) {
          console.error(`‚ùå „Ç®„É©„Éº‰øÆÂæ©‰∏≠„Å´‰æãÂ§ñÁô∫Áîü:`, error);
        }
      }
    } finally {
      setIsFixing(false);
      updateSystemStats();
      console.log('üîß Ëá™Âãï‰øÆÂæ©„Éó„É≠„Çª„ÇπÂÆå‰∫Ü');
    }
  };

  // Áõ£Ë¶ñÈñãÂßã/ÂÅúÊ≠¢
  const toggleMonitoring = async () => {
    if (!mcpDetector.current) {
      console.warn('‚ö†Ô∏è „Ç∑„Çπ„ÉÜ„É†„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
      return;
    }

    try {
      if (isMonitoring) {
        // Áõ£Ë¶ñÂÅúÊ≠¢
        console.log('üõë Áõ£Ë¶ñ„ÇíÂÅúÊ≠¢‰∏≠...');
        await mcpDetector.current.stopMonitoring();
        
        if (monitoringInterval.current) {
          clearInterval(monitoringInterval.current);
          monitoringInterval.current = null;
        }
        
        setStats(prev => ({ ...prev, activeMonitoring: false }));
        console.log('‚úÖ Áõ£Ë¶ñ„ÇíÂÅúÊ≠¢„Åó„Åæ„Åó„Åü');
      } else {
        // Áõ£Ë¶ñÈñãÂßã
        console.log('üîç Áõ£Ë¶ñ„ÇíÈñãÂßã‰∏≠...');
        await mcpDetector.current.startMonitoring();
        
        // ÂÆöÊúüÁöÑ„Å™Áµ±Ë®àÊõ¥Êñ∞
        monitoringInterval.current = setInterval(() => {
          detectErrors();
          updateSystemStats();
        }, 5000);
        
        setStats(prev => ({ ...prev, activeMonitoring: true }));
        
        // Âç≥Â∫ß„Å´ÂÆüË°å
        await detectErrors();
        console.log('‚úÖ Áõ£Ë¶ñ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü');
      }
      
      setIsMonitoring(!isMonitoring);
    } catch (error) {
      console.error('‚ùå Áõ£Ë¶ñÁä∂ÊÖã„ÅÆÂàá„ÇäÊõø„Åà„Å´Â§±Êïó:', error);
    }
  };

  // ÁÑ°Èôê„É´„Éº„Éó„É¢„Éº„Éâ„ÅÆÂàá„ÇäÊõø„Åà
  const toggleInfiniteLoop = async () => {
    if (!infiniteLoopController.current) {
      console.warn('‚ö†Ô∏è ÁÑ°Èôê„É´„Éº„Éó„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
      return;
    }

    try {
      if (infiniteLoop) {
        // ÁÑ°Èôê„É´„Éº„ÉóÂÅúÊ≠¢
        console.log('üõë ÁÑ°Èôê„É´„Éº„Éó„ÇíÂÅúÊ≠¢‰∏≠...');
        await infiniteLoopController.current.stopInfiniteLoop();
        setStats(prev => ({ ...prev, infiniteLoopActive: false }));
        onInfiniteLoopStopped?.();
        console.log('‚úÖ ÁÑ°Èôê„É´„Éº„Éó„ÇíÂÅúÊ≠¢„Åó„Åæ„Åó„Åü');
      } else {
        // ÁÑ°Èôê„É´„Éº„ÉóÈñãÂßã
        console.log('üîÑ ÁÑ°Èôê„É´„Éº„Éó„ÇíÈñãÂßã‰∏≠...');
        await infiniteLoopController.current.startInfiniteLoop();
        setStats(prev => ({ ...prev, infiniteLoopActive: true }));
        onInfiniteLoopStarted?.();
        console.log('‚úÖ ÁÑ°Èôê„É´„Éº„Éó„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü');
        
        // Áõ£Ë¶ñ„ÇÇÈñãÂßã„Åó„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØÈñãÂßã
        if (!isMonitoring) {
          await toggleMonitoring();
        }
      }
      
      setInfiniteLoop(!infiniteLoop);
    } catch (error) {
      console.error('‚ùå ÁÑ°Èôê„É´„Éº„ÉóÁä∂ÊÖã„ÅÆÂàá„ÇäÊõø„Åà„Å´Â§±Êïó:', error);
    }
  };

  // ÊâãÂãï‰øÆÂæ©
  const fixError = async (error: ExtendedBrowserError) => {
    setIsFixing(true);
    try {
      console.log(`üîß ÊâãÂãï‰øÆÂæ©„ÇíÈñãÂßã: ${error.message}`);
      await startAutoFix([error]);
    } catch (error) {
      console.error('‚ùå ÊâãÂãï‰øÆÂæ©„Å´Â§±Êïó:', error);
    } finally {
      setIsFixing(false);
    }
  };

  // „Ç®„É©„ÉºË©≥Á¥∞Ë°®Á§∫
  const showErrorDetails = (error: ExtendedBrowserError) => {
    setSelectedError(error);
    setDetailsOpen(true);
  };

  // „Ç®„É©„ÉºÁµ±Ë®à„ÅÆ„É™„Çª„ÉÉ„Éà
  const resetStats = async () => {
    try {
      console.log('üîÑ Áµ±Ë®àÊÉÖÂ†±„Çí„É™„Çª„ÉÉ„Éà‰∏≠...');
      
      // „Ç∑„Çπ„ÉÜ„É†„ÇíÂÅúÊ≠¢
      if (isMonitoring) {
        await toggleMonitoring();
      }
      if (infiniteLoop) {
        await toggleInfiniteLoop();
      }
      
      // Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
      setErrors([]);
      setStats({
        totalErrors: 0,
        fixedErrors: 0,
        activeMonitoring: false,
        lastCheck: new Date(),
        cycleCount: 0,
        successRate: 0,
        infiniteLoopActive: false,
        currentIteration: 0,
        healthScore: 100,
        activeBrowsers: 0,
        systemUptime: 0
      });
      
      systemStartTime.current = new Date();
      console.log('‚úÖ Áµ±Ë®àÊÉÖÂ†±„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åó„Åü');
      
    } catch (error) {
      console.error('‚ùå Áµ±Ë®à„É™„Çª„ÉÉ„Éà„Å´Â§±Êïó:', error);
    }
  };

  // „Ç¢„Ç≥„Éº„Éá„Ç£„Ç™„É≥„ÅÆÂ±ïÈñãÂà∂Âæ°
  const handleAccordionChange = (panel: string) => (
    event: React.SyntheticEvent,
    isExpanded: boolean
  ) => {
    setExpandedAccordion(isExpanded ? panel : false);
  };

  // ÊôÇÈñì„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÈñ¢Êï∞
  const formatUptime = (milliseconds: number): string => {
    const seconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 0) {
      return `${days}Êó• ${hours % 24}ÊôÇÈñì ${minutes % 60}ÂàÜ`;
    } else if (hours > 0) {
      return `${hours}ÊôÇÈñì ${minutes % 60}ÂàÜ`;
    } else if (minutes > 0) {
      return `${minutes}ÂàÜ ${seconds % 60}Áßí`;
    } else {
      return `${seconds}Áßí`;
    }
  };

  // „Ç®„É©„Éº„Çø„Ç§„Éó„Ç¢„Ç§„Ç≥„É≥„ÇíÂèñÂæó
  const getErrorTypeIcon = (type: string) => {
    switch (type) {
      case 'console': return <CodeIcon />;
      case 'network': return <NetworkCheckIcon />;
      case 'javascript': return <BugReportIcon />;
      case 'security': return <SecurityIcon />;
      case 'accessibility': return <VisibilityIcon />;
      default: return <ErrorIcon />;
    }
  };

  // ÂàùÊúüÂåñ„Å®„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
  useEffect(() => {
    // „Ç∑„Çπ„ÉÜ„É†„ÇíÂàùÊúüÂåñ
    initializeSystem();

    return () => {
      // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
      if (monitoringInterval.current) {
        clearInterval(monitoringInterval.current);
      }
      
      // „Çµ„Éº„Éì„Çπ„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
      if (mcpDetector.current) {
        mcpDetector.current.stopMonitoring().catch(console.error);
      }
      if (infiniteLoopController.current) {
        infiniteLoopController.current.stopInfiniteLoop().catch(console.error);
      }
    };
  }, []);

  // Ëá™ÂãïÈñãÂßã
  useEffect(() => {
    if (autoStart && !isMonitoring && mcpDetector.current) {
      toggleMonitoring();
    }
  }, [autoStart, mcpDetector.current]);

  // Áµ±Ë®àÊÉÖÂ†±„ÅÆÂÆöÊúüÊõ¥Êñ∞
  useEffect(() => {
    if (isMonitoring) {
      const interval = setInterval(updateSystemStats, 2000);
      return () => clearInterval(interval);
    }
  }, [isMonitoring]);

  const unfixedErrors = errors.filter(e => !e.fixed);
  const criticalErrors = errors.filter(e => e.type === 'error' && !e.fixed);

  return (
    <Box sx={{ p: 3 }}>
      {/* „É°„Ç§„É≥„Ç≥„É≥„Éà„É≠„Éº„É´„Éë„Éç„É´ */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
            <BugReportIcon sx={{ mr: 1 }} />
            „Éñ„É©„Ç¶„Ç∂„Ç®„É©„ÉºÊ§úÁü•„Éª‰øÆÂæ©„Ç∑„Çπ„ÉÜ„É†
          </Typography>
          
          <Grid container spacing={3} alignItems="center">
            <Grid item xs={12} md={6}>
              <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
                <Button
                  variant={isMonitoring ? "contained" : "outlined"}
                  color={isMonitoring ? "error" : "primary"}
                  startIcon={isMonitoring ? <StopIcon /> : <PlayIcon />}
                  onClick={toggleMonitoring}
                  disabled={isFixing}
                >
                  {isMonitoring ? 'Áõ£Ë¶ñÂÅúÊ≠¢' : 'Áõ£Ë¶ñÈñãÂßã'}
                </Button>
                
                <FormControlLabel
                  control={
                    <Switch
                      checked={autoFix}
                      onChange={(e) => setAutoFix(e.target.checked)}
                      disabled={isFixing}
                    />
                  }
                  label="Ëá™Âãï‰øÆÂæ©"
                />
                
                <FormControlLabel
                  control={
                    <Switch
                      checked={infiniteLoop}
                      onChange={toggleInfiniteLoop}
                      disabled={isFixing}
                    />
                  }
                  label="ÁÑ°Èôê„É´„Éº„Éó"
                />
                
                <IconButton onClick={resetStats} disabled={isFixing}>
                  <RefreshIcon />
                </IconButton>
              </Box>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Typography variant="body2" color="textSecondary">
                Áõ£Ë¶ñÂØæË±°: {targetUrl}
              </Typography>
              <Typography variant="body2" color="textSecondary">
                ÊúÄÁµÇ„ÉÅ„Çß„ÉÉ„ÇØ: {stats.lastCheck.toLocaleTimeString()}
              </Typography>
            </Grid>
          </Grid>
          
          {isFixing && (
            <Box sx={{ mt: 2 }}>
              <Alert severity="info" sx={{ display: 'flex', alignItems: 'center' }}>
                <CircularProgress size={20} sx={{ mr: 1 }} />
                „Ç®„É©„Éº„ÇíËá™Âãï‰øÆÂæ©‰∏≠...
              </Alert>
            </Box>
          )}
        </CardContent>
      </Card>

      {/* Áµ±Ë®àÊÉÖÂ†± */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Paper sx={{ p: 2, textAlign: 'center' }}>
            <Typography variant="h4" color="error">
              {stats.totalErrors}
            </Typography>
            <Typography variant="body2">Á∑è„Ç®„É©„ÉºÊï∞</Typography>
          </Paper>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Paper sx={{ p: 2, textAlign: 'center' }}>
            <Typography variant="h4" color="success.main">
              {stats.fixedErrors}
            </Typography>
            <Typography variant="body2">‰øÆÂæ©Ê∏à„Åø</Typography>
          </Paper>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Paper sx={{ p: 2, textAlign: 'center' }}>
            <Typography variant="h4" color="warning.main">
              {unfixedErrors.length}
            </Typography>
            <Typography variant="body2">Êú™‰øÆÂæ©</Typography>
          </Paper>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Paper sx={{ p: 2, textAlign: 'center' }}>
            <Typography variant="h4" color="info.main">
              {stats.successRate.toFixed(1)}%
            </Typography>
            <Typography variant="body2">‰øÆÂæ©ÊàêÂäüÁéá</Typography>
          </Paper>
        </Grid>
      </Grid>

      {/* ÈÄ≤Ë°åÁä∂Ê≥Å */}
      {isMonitoring && (
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              Áõ£Ë¶ñÁä∂Ê≥Å
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
              <Typography variant="body2" sx={{ mr: 2 }}>
                „Çµ„Ç§„ÇØ„É´: {stats.cycleCount}
              </Typography>
              <Chip 
                icon={stats.activeMonitoring ? <VisibilityIcon /> : <StopIcon />}
                label={stats.activeMonitoring ? "Áõ£Ë¶ñ‰∏≠" : "ÂÅúÊ≠¢‰∏≠"}
                color={stats.activeMonitoring ? "success" : "default"}
                size="small"
              />
            </Box>
            <LinearProgress 
              variant="indeterminate" 
              sx={{ 
                height: 6, 
                borderRadius: 3,
                display: stats.activeMonitoring ? 'block' : 'none'
              }} 
            />
          </CardContent>
        </Card>
      )}

      {/* „Ç®„É©„Éº„É™„Çπ„Éà */}
      <Card>
        <CardContent>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Typography variant="h6">
              Ê§úÂá∫„Åï„Çå„Åü„Ç®„É©„Éº
            </Typography>
            {criticalErrors.length > 0 && (
              <Badge badgeContent={criticalErrors.length} color="error">
                <ErrorIcon />
              </Badge>
            )}
          </Box>
          
          {errors.length === 0 ? (
            <Alert severity="success" icon={<CheckCircleIcon />}>
              ÁèæÂú®„Ç®„É©„Éº„ÅØÊ§úÂá∫„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì
            </Alert>
          ) : (
            <List>
              {errors.map((error) => (
                <ListItem
                  key={error.id}
                  sx={{
                    border: 1,
                    borderColor: 'divider',
                    borderRadius: 1,
                    mb: 1,
                    backgroundColor: error.fixed ? 'success.light' : 'background.paper'
                  }}
                >
                  <ListItemIcon>
                    {error.fixed ? (
                      <CheckCircleIcon color="success" />
                    ) : error.type === 'error' ? (
                      <ErrorIcon color="error" />
                    ) : (
                      <WarningIcon color="warning" />
                    )}
                  </ListItemIcon>
                  
                  <ListItemText
                    primary={
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Typography variant="body1">
                          {error.message}
                        </Typography>
                        <Chip
                          label={error.type}
                          size="small"
                          color={error.type === 'error' ? 'error' : 'warning'}
                        />
                        {error.fixAttempts > 0 && (
                          <Chip
                            label={`‰øÆÂæ©Ë©¶Ë°å: ${error.fixAttempts}`}
                            size="small"
                            variant="outlined"
                          />
                        )}
                      </Box>
                    }
                    secondary={
                      <Box>
                        <Typography variant="body2" color="textSecondary">
                          {error.source}
                        </Typography>
                        <Typography variant="caption">
                          {error.timestamp.toLocaleString()}
                        </Typography>
                      </Box>
                    }
                  />
                  
                  <Box sx={{ display: 'flex', gap: 1 }}>
                    <Tooltip title="Ë©≥Á¥∞Ë°®Á§∫">
                      <IconButton onClick={() => showErrorDetails(error)}>
                        <AssessmentIcon />
                      </IconButton>
                    </Tooltip>
                    
                    {!error.fixed && (
                      <Tooltip title="ÊâãÂãï‰øÆÂæ©">
                        <IconButton 
                          onClick={() => fixError(error)}
                          disabled={isFixing}
                        >
                          <BuildIcon />
                        </IconButton>
                      </Tooltip>
                    )}
                  </Box>
                </ListItem>
              ))}
            </List>
          )}
        </CardContent>
      </Card>

      {/* „Ç®„É©„ÉºË©≥Á¥∞„ÉÄ„Ç§„Ç¢„É≠„Ç∞ */}
      <Dialog 
        open={detailsOpen} 
        onClose={() => setDetailsOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          „Ç®„É©„ÉºË©≥Á¥∞ÊÉÖÂ†±
        </DialogTitle>
        <DialogContent>
          {selectedError && (
            <Box>
              <Typography variant="h6" gutterBottom>
                {selectedError.message}
              </Typography>
              
              <Typography variant="body2" color="textSecondary" gutterBottom>
                „ÇΩ„Éº„Çπ: {selectedError.source}
              </Typography>
              
              <Typography variant="body2" color="textSecondary" gutterBottom>
                Áô∫ÁîüÊôÇÂàª: {selectedError.timestamp.toLocaleString()}
              </Typography>
              
              <Typography variant="body2" color="textSecondary" gutterBottom>
                „Çø„Ç§„Éó: {selectedError.type}
              </Typography>
              
              <Typography variant="body2" color="textSecondary" gutterBottom>
                ‰øÆÂæ©Ë©¶Ë°åÂõûÊï∞: {selectedError.fixAttempts}
              </Typography>
              
              <Typography variant="body2" color="textSecondary" gutterBottom>
                „Çπ„ÉÜ„Éº„Çø„Çπ: {selectedError.fixed ? '‰øÆÂæ©Ê∏à„Åø' : 'Êú™‰øÆÂæ©'}
              </Typography>
              
              {selectedError.stack && (
                <Box sx={{ mt: 2 }}>
                  <Typography variant="subtitle2" gutterBottom>
                    „Çπ„Çø„ÉÉ„ÇØ„Éà„É¨„Éº„Çπ:
                  </Typography>
                  <Paper sx={{ p: 2, backgroundColor: 'grey.100' }}>
                    <Typography variant="body2" component="pre" sx={{ whiteSpace: 'pre-wrap' }}>
                      {selectedError.stack}
                    </Typography>
                  </Paper>
                </Box>
              )}
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          {selectedError && !selectedError.fixed && (
            <Button 
              onClick={() => {
                fixError(selectedError);
                setDetailsOpen(false);
              }}
              startIcon={<BuildIcon />}
              disabled={isFixing}
            >
              ‰øÆÂæ©ÂÆüË°å
            </Button>
          )}
          <Button onClick={() => setDetailsOpen(false)}>
            Èñâ„Åò„Çã
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default BrowserErrorMonitor;