name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: itsm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psycopg2-binary asyncpg aiosqlite
    
    - name: Run pytest
      timeout-minutes: 15
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/itsm_test
        ASYNC_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/itsm_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
        ENCRYPTION_KEY: test-encryption-key-32chars-long!
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
      run: |
        cd backend
        pytest --cov=app --cov-report=xml --cov-report=html --timeout=300 -m "not slow"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run unit tests
      run: |
        cd frontend
        npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  e2e-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: itsm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psycopg2-binary asyncpg aiosqlite
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install Playwright browsers
      run: |
        cd frontend
        npx playwright install --with-deps
    
    - name: Start backend server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/itsm_test
        ASYNC_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/itsm_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
        ENCRYPTION_KEY: test-encryption-key-32chars-long!
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
      run: |
        cd backend
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Initialize test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/itsm_test
        ASYNC_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/itsm_test
        ENCRYPTION_KEY: test-encryption-key-32chars-long!
      run: |
        cd backend
        python init_sqlite_db.py
    
    - name: Build and start frontend server
      run: |
        cd frontend
        npm run build
        npm run preview &
        sleep 10
        echo "FRONTEND_PID=$!" >> $GITHUB_ENV
    
    - name: Wait for servers to be ready
      run: |
        timeout 60 bash -c 'until curl -s http://localhost:8000/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -s http://localhost:3000; do sleep 2; done'
    
    - name: Run E2E tests
      timeout-minutes: 20
      run: |
        npx playwright test
    
    - name: Stop servers
      if: always()
      run: |
        if [ -n "$FRONTEND_PID" ]; then kill $FRONTEND_PID || true; fi
        pkill -f "uvicorn.*8000" || true
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: tests/reports/playwright-report/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r backend/app -f json -o bandit-report.json -ll || true
    
    - name: Run Safety check
      run: |
        pip install safety
        cd backend
        safety check -r requirements.txt --json > ../safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Python dependencies
      run: |
        cd backend
        pip install black isort flake8 mypy
        pip install -r requirements.txt
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run Python code formatting check
      run: |
        cd backend
        black --check .
        isort --check-only .
    
    - name: Run Python linting
      run: |
        cd backend
        flake8 .
    
    - name: Run Python type checking
      run: |
        cd backend
        mypy app/
    
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: Run TypeScript check
      run: |
        cd frontend
        npx tsc --noEmit