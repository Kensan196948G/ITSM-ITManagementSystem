name: ITSM CI/CD Monitor - Auto-Repair Detection

on:
  schedule:
    # GitHub Actions minimum is 5 minutes for public repos
    - cron: '*/5 * * * *'  # Every 5 minutes
  workflow_dispatch:
  repository_dispatch:
    types: [ci-failure-detected, manual-monitor-trigger]

env:
  MONITOR_INTERVAL: 5  # 5-second intervals within the job
  MAX_CONSECUTIVE_FAILURES: 3
  CLAUDE_FLOW_LOG: .claude-flow/ci-retry-log.json
  INFINITE_LOOP_STATE: coordination/infinite_loop_state.json

jobs:
  monitor:
    name: Continuous CI/CD Failure Detection & Auto-Repair
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Authenticate GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$GITHUB_TOKEN" | gh auth login --with-token
          gh auth status

      - name: Initialize Monitor State
        run: |
          mkdir -p .claude-flow
          
          # Initialize monitor state if not exists
          if [ ! -f ".claude-flow/monitor-state.json" ]; then
            echo '{
              "monitor_start": "'$(date -u +%Y-%m-%dT%H:%M:%S.%6N)'",
              "consecutive_failures": 0,
              "last_check": "'$(date -u +%Y-%m-%dT%H:%M:%S.%6N)'",
              "total_checks": 0,
              "failures_detected": 0,
              "repairs_triggered": 0,
              "active": true
            }' > .claude-flow/monitor-state.json
          fi
          
          echo "üîç CI Monitor initialized - Loop #$(jq -r '.loop_count // 256' $INFINITE_LOOP_STATE) active"

      - name: Continuous CI Status Monitoring
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîÑ Starting CI/CD monitoring loop with ${MONITOR_INTERVAL}s intervals"
          
          # Function to check CI status
          check_ci_status() {
            local failed_runs=0
            local check_time=$(date -u +%Y-%m-%dT%H:%M:%S.%6N)
            
            # Get recent workflow runs (last 10)
            local runs=$(gh run list --limit 10 --json status,conclusion,workflowName,createdAt,url)
            
            # Check for failed runs (excluding self)
            local recent_failures=$(echo "$runs" | jq -r '.[] | select(.conclusion == "failure" and .workflowName != "ITSM CI/CD Monitor - Auto-Repair Detection") | .workflowName' | wc -l)
            
            if [ "$recent_failures" -gt 0 ]; then
              echo "‚ö†Ô∏è Detected $recent_failures recent CI failures"
              
              # Get failure details
              local failure_details=$(echo "$runs" | jq -r '.[] | select(.conclusion == "failure" and .workflowName != "ITSM CI/CD Monitor - Auto-Repair Detection") | "Workflow: \(.workflowName), URL: \(.url)"')
              
              echo "Failure details:"
              echo "$failure_details"
              
              # Update monitor state
              local current_failures=$(jq -r '.consecutive_failures // 0' .claude-flow/monitor-state.json)
              local new_failures=$((current_failures + 1))
              
              jq --arg check_time "$check_time" --arg new_failures "$new_failures" '
                .last_check = $check_time |
                .consecutive_failures = ($new_failures | tonumber) |
                .failures_detected += 1 |
                .total_checks += 1
              ' .claude-flow/monitor-state.json > .claude-flow/monitor-state-tmp.json
              mv .claude-flow/monitor-state-tmp.json .claude-flow/monitor-state.json
              
              return 1  # Failure detected
            else
              echo "‚úÖ CI Status: All workflows healthy"
              
              # Reset consecutive failures on success
              jq --arg check_time "$check_time" '
                .last_check = $check_time |
                .consecutive_failures = 0 |
                .total_checks += 1
              ' .claude-flow/monitor-state.json > .claude-flow/monitor-state-tmp.json
              mv .claude-flow/monitor-state-tmp.json .claude-flow/monitor-state.json
              
              return 0  # No failures
            fi
          }
          
          # Main monitoring loop - 3 cycles of 10 seconds each for 30 seconds total
          for i in $(seq 1 3); do
            echo "--- Monitor Check #$i at $(date) ---"
            
            if check_ci_status; then
              echo "Status: OK"
            else
              echo "Status: FAILURE DETECTED"
              
              # Check if we need to trigger auto-repair
              local consecutive=$(jq -r '.consecutive_failures' .claude-flow/monitor-state.json)
              echo "Consecutive failures: $consecutive"
              
              if [ "$consecutive" -ge "$MAX_CONSECUTIVE_FAILURES" ]; then
                echo "üö® THRESHOLD EXCEEDED - Triggering auto-repair sequence"
                
                # Trigger ci-retry workflow
                if gh workflow run ci-retry.yml --ref main; then
                  echo "Successfully triggered ci-retry workflow"
                else
                  echo "Failed to trigger ci-retry workflow"
                fi
                
                # Update repairs triggered counter
                jq '.repairs_triggered += 1' .claude-flow/monitor-state.json > .claude-flow/monitor-state-tmp.json
                mv .claude-flow/monitor-state-tmp.json .claude-flow/monitor-state.json
                
                echo "Auto-repair triggered successfully"
                break  # Exit monitoring loop after triggering repair
              fi
            fi
            
            # Wait for next check (except on last iteration)
            if [ "$i" -lt 3 ]; then
              echo "Waiting 10 seconds for next check..."
              sleep 10
            fi
          done

      - name: Update Infinite Loop Integration
        run: |
          # Read current infinite loop state
          current_loop=$(jq -r '.loop_count // 256' $INFINITE_LOOP_STATE)
          total_errors=$(jq -r '.total_errors_fixed // 768' $INFINITE_LOOP_STATE)
          
          echo "Current infinite loop: #$current_loop (${total_errors} total errors fixed)"
          
          # Log monitor integration
          echo '{
            "monitor_integration": {
              "infinite_loop_number": '$current_loop',
              "total_errors_fixed": '$total_errors',
              "monitor_timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%6N)'",
              "monitoring_active": true,
              "integration_status": "active"
            }
          }' > .claude-flow/monitor-integration.json
          
          echo "Infinite loop integration updated"

      - name: Generate Monitor Report
        run: |
          monitor_state=$(cat .claude-flow/monitor-state.json)
          consecutive_failures=$(echo "$monitor_state" | jq -r '.consecutive_failures')
          total_checks=$(echo "$monitor_state" | jq -r '.total_checks')
          failures_detected=$(echo "$monitor_state" | jq -r '.failures_detected')
          repairs_triggered=$(echo "$monitor_state" | jq -r '.repairs_triggered')
          
          echo "## üîç CI Monitor Report - $(date)"
          echo ""
          echo "**Áõ£Ë¶ñÁä∂Ê≥Å**:"
          echo "- Total Checks: $total_checks"
          echo "- Failures Detected: $failures_detected"
          echo "- Consecutive Failures: $consecutive_failures"
          echo "- Auto-Repairs Triggered: $repairs_triggered"
          echo ""
          echo "**Infinite Loop Integration**:"
          echo "- Current Loop: #$(jq -r '.loop_count' $INFINITE_LOOP_STATE)"
          echo "- Total Errors Fixed: $(jq -r '.total_errors_fixed' $INFINITE_LOOP_STATE)"
          echo ""
          echo "**Next Actions**:"
          if [ "$consecutive_failures" -ge "$MAX_CONSECUTIVE_FAILURES" ]; then
            echo "- üîÑ Auto-repair sequence triggered"
            echo "- üìä Monitoring system active"
          else
            echo "- ‚úÖ Continue monitoring (threshold not reached)"
            echo "- üîç Next check in 5 seconds"
          fi
          
          echo ""
          echo "**Monitor Config**:"
          echo "- Check Interval: ${MONITOR_INTERVAL}s"
          echo "- Failure Threshold: $MAX_CONSECUTIVE_FAILURES"
          echo "- Integration: Infinite Loop System Active"

      - name: Upload Monitor Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: monitor-artifacts-${{ github.run_id }}
          path: |
            .claude-flow/monitor-state.json
            .claude-flow/monitor-integration.json

      - name: Notify Monitor Status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          status="monitoring"
          consecutive_failures=$(jq -r '.consecutive_failures' .claude-flow/monitor-state.json)
          
          if [ "$consecutive_failures" -ge "$MAX_CONSECUTIVE_FAILURES" ]; then
            status="repair_triggered"
            echo "üîÑ Monitor Status: Auto-repair sequence triggered"
          else
            echo "üîç Monitor Status: Active monitoring (${consecutive_failures}/${MAX_CONSECUTIVE_FAILURES} failures)"
          fi
          
          # Create or update monitoring issue
          issue_title="üîç CI Monitor Status - $(date +%Y-%m-%d)"
          existing_issue=$(gh issue list --label "ci-monitor" --state open --limit 1 --json number --jq '.[0].number // empty')
          
          if [ -n "$existing_issue" ]; then
            echo "Updating existing monitor issue #$existing_issue"
            gh issue comment "$existing_issue" --body "Monitor update at $(date): Status=$status, Consecutive failures: $consecutive_failures/$MAX_CONSECUTIVE_FAILURES"
          else
            echo "Creating new monitor issue"
            gh issue create \
              --title "$issue_title" \
              --body "CI Monitor active. Status: $status. Infinite Loop: #$(jq -r '.loop_count' $INFINITE_LOOP_STATE)" \
              --label "ci-monitor,auto-repair" || echo "Failed to create monitor issue"
          fi
