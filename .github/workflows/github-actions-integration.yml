name: GitHub Actions Integration Monitor

on:
  workflow_run:
    workflows: ["ITSM CI/CD Pipeline", "ITSM Test Automation", "Test Suite"]
    types: [completed]
  schedule:
    # Monitor every 5 minutes during work hours
    - cron: '*/5 9-18 * * 1-5'
  workflow_dispatch:

env:
  MONITOR_ENABLED: 'true'
  REPAIR_INTEGRATION: 'true'

jobs:
  monitor-workflows:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pyyaml
    
    - name: Monitor Workflow Status
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python << 'EOF'
        import os
        import requests
        import json
        import datetime
        
        token = os.environ['GITHUB_TOKEN']
        repo = os.environ['GITHUB_REPOSITORY']
        
        headers = {
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        # Get recent workflow runs
        url = f'https://api.github.com/repos/{repo}/actions/runs'
        params = {'per_page': 10, 'status': 'completed'}
        
        try:
            response = requests.get(url, headers=headers, params=params, timeout=30)
            response.raise_for_status()
            workflow_runs = response.json().get('workflow_runs', [])
        except requests.RequestException as e:
            print(f"API request failed: {e}")
            workflow_runs = []
        except Exception as e:
            print(f"Unexpected error: {e}")
            workflow_runs = []
        
        failed_workflows = []
        for run in workflow_runs:
            if run['conclusion'] == 'failure':
                failed_workflows.append({
                    'id': run['id'],
                    'name': run['name'],
                    'head_branch': run['head_branch'],
                    'created_at': run['created_at'],
                    'html_url': run['html_url']
                })
        
        # Create monitoring report
        report = {
            'timestamp': datetime.datetime.utcnow().isoformat(),
            'total_recent_runs': len(workflow_runs),
            'failed_runs': len(failed_workflows),
            'failed_workflows': failed_workflows,
            'status': 'critical' if failed_workflows else 'healthy'
        }
        
        # Save report
        os.makedirs('coordination', exist_ok=True)
        with open('coordination/github_actions_monitor_report.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        print(f"GitHub Actions Monitor Report:")
        print(f"- Total recent runs: {report['total_recent_runs']}")
        print(f"- Failed runs: {report['failed_runs']}")
        print(f"- Status: {report['status']}")
        
        if failed_workflows:
            print("‚ö†Ô∏è Failed workflows detected:")
            for workflow in failed_workflows:
                print(f"  - {workflow['name']} (ID: {workflow['id']})")
        
        # Rate limiting protection
        import time
        time.sleep(2)  # Prevent API rate limiting
        
        EOF

    - name: Trigger Local Repair Integration
      if: github.event.workflow_run.conclusion == 'failure'
      run: |
        # Create repair trigger for local system
        cat << 'EOF' > coordination/github_actions_repair_trigger.json
        {
          "trigger_time": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
          "workflow_name": "${{ github.event.workflow_run.name }}",
          "workflow_id": "${{ github.event.workflow_run.id }}",
          "conclusion": "${{ github.event.workflow_run.conclusion }}",
          "head_branch": "${{ github.event.workflow_run.head_branch }}",
          "head_sha": "${{ github.event.workflow_run.head_sha }}",
          "html_url": "${{ github.event.workflow_run.html_url }}",
          "repair_needed": true,
          "priority": "high"
        }
        EOF
        
        echo "üîß GitHub Actions failure detected - repair trigger created"
        echo "Workflow: ${{ github.event.workflow_run.name }}"
        echo "Status: ${{ github.event.workflow_run.conclusion }}"

    - name: Auto-commit monitoring data
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [[ -n $(git status --porcelain) ]]; then
          git add coordination/
          git commit -m "ü§ñ GitHub Actions Monitor: Auto-update $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)"
          git push
          echo "‚úÖ Monitoring data committed and pushed"
        else
          echo "‚ÑπÔ∏è No changes to commit"
        fi

    - name: Create Issue for Critical Failures
      if: github.event.workflow_run.conclusion == 'failure'
      uses: actions/github-script@v6
      with:
        script: |
          const workflowName = '${{ github.event.workflow_run.name }}';
          const workflowId = '${{ github.event.workflow_run.id }}';
          const htmlUrl = '${{ github.event.workflow_run.html_url }}';
          const headBranch = '${{ github.event.workflow_run.head_branch }}';
          
          const title = `üö® GitHub Actions Failure: ${workflowName}`;
          const body = `
          ## GitHub Actions Failure Alert
          
          **Workflow**: ${workflowName}
          **Branch**: ${headBranch}
          **Run ID**: ${workflowId}
          **Status**: Failed
          **Run URL**: ${htmlUrl}
          **Timestamp**: ${new Date().toISOString()}
          
          ### Automatic Actions Taken
          - [x] Monitoring data updated
          - [x] Repair trigger created for local system
          - [x] Issue automatically created
          
          ### Required Manual Actions
          1. Review workflow failure logs
          2. Verify local repair system activation
          3. Monitor subsequent workflow runs
          4. Close this issue when resolved
          
          **Priority**: High - Immediate investigation required
          
          ---
          *This issue was automatically created by GitHub Actions Integration Monitor*
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['github-actions', 'failure', 'automated', 'high-priority']
          });

  integration-health-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Integration Health Check
      run: |
        echo "üîç GitHub Actions Integration Health Check"
        echo "Timestamp: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)"
        echo "Repository: ${{ github.repository }}"
        echo "Event: ${{ github.event_name }}"
        echo "‚úÖ Integration system operational"